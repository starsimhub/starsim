# run { #starsim.run }

`run`

Utilities for running in parallel

## Classes

| Name | Description |
| --- | --- |
| [MultiSim](#starsim.run.MultiSim) | Class for running multiple copies of a simulation. |

### MultiSim { #starsim.run.MultiSim }

```python
run.MultiSim(
    self,
    sims=None,
    base_sim=None,
    label=None,
    n_runs=4,
    initialize=False,
    inplace=True,
    debug=False,
    **kwargs,
)
```

Class for running multiple copies of a simulation.

Args:
    sims (Sim/list): a single sim or a list of sims
    base_sim (Sim): the sim used for shared properties; if not supplied, the first of the sims provided
    label (str): the name of the multisim
    n_runs (int): if a single sim is provided, the number of replicates (default 4)
    initialize (bool): whether or not to initialize the sims (otherwise, initialize them during run)
    inplace (bool): whether to modify the sims in-place (default True); else return new sims
    debug (bool): if True, run in serial
    kwargs (dict): stored in run_args and passed to run()

#### Methods

| Name | Description |
| --- | --- |
| [brief](#starsim.run.MultiSim.brief) | A single-line display of the MultiSim; same as print(multisim) |
| [disp](#starsim.run.MultiSim.disp) | Display the full object |
| [init_sims](#starsim.run.MultiSim.init_sims) | Initialize the sims |
| [mean](#starsim.run.MultiSim.mean) | Alias for reduce(use_mean=True). See reduce() for full description. |
| [median](#starsim.run.MultiSim.median) | Alias for reduce(use_mean=False). See reduce() for full description. |
| [plot](#starsim.run.MultiSim.plot) | Plot all results in the MultiSim object. |
| [reduce](#starsim.run.MultiSim.reduce) | Combine multiple sims into a single sim statistically: by default, use |
| [reset](#starsim.run.MultiSim.reset) | Undo reduce() by resetting the base sim, which, and results |
| [run](#starsim.run.MultiSim.run) | Run the sims; see ``ss.multi_run()`` for additional arguments |
| [show](#starsim.run.MultiSim.show) | Print a moderate length summary of the MultiSim. See also multisim.disp() |
| [shrink](#starsim.run.MultiSim.shrink) | Not to be confused with reduce(), this shrinks each sim in the msim; |
| [summarize](#starsim.run.MultiSim.summarize) | Summarize the simulations statistically. |

##### brief { #starsim.run.MultiSim.brief }

```python
run.MultiSim.brief()
```

A single-line display of the MultiSim; same as print(multisim)

##### disp { #starsim.run.MultiSim.disp }

```python
run.MultiSim.disp()
```

Display the full object

##### init_sims { #starsim.run.MultiSim.init_sims }

```python
run.MultiSim.init_sims(**kwargs)
```

Initialize the sims

##### mean { #starsim.run.MultiSim.mean }

```python
run.MultiSim.mean(bounds=None, **kwargs)
```

Alias for reduce(use_mean=True). See reduce() for full description.

Args:
    bounds (float): multiplier on the standard deviation for the upper and lower bounds (default, 2)
    kwargs (dict): passed to reduce()

##### median { #starsim.run.MultiSim.median }

```python
run.MultiSim.median(quantiles=None, **kwargs)
```

Alias for reduce(use_mean=False). See reduce() for full description.

Args:
    quantiles (list or dict): upper and lower quantiles (default, 0.1 and 0.9)
    kwargs (dict): passed to reduce()

##### plot { #starsim.run.MultiSim.plot }

```python
run.MultiSim.plot(key=None, fig=None, fig_kw=None, plot_kw=None, fill_kw=None)
```

Plot all results in the MultiSim object.

If the MultiSim object has been reduced (i.e. mean or median), then plot
the best value and uncertainty bound. Otherwise, plot individual sims.

Args:
    key (str): the results key to plot (by default, all)
    fig (Figure): if provided, plot results into an existing figure
    fig_kw (dict): passed to ``plt.subplots()``
    plot_kw (dict): passed to ``plt.plot()``
    fill_kw (dict): passed to ``plt.fill_between()``

##### reduce { #starsim.run.MultiSim.reduce }

```python
run.MultiSim.reduce(quantiles=None, use_mean=False, bounds=None, output=False)
```

Combine multiple sims into a single sim statistically: by default, use
the median value and the 10th and 90th percentiles for the lower and upper
bounds. If use_mean=True, then use the mean and Â±2 standard deviations
for lower and upper bounds.

Args:
    quantiles (dict): the quantiles to use, e.g. [0.1, 0.9] or {'low : '0.1, 'high' : 0.9}
    use_mean (bool): whether to use the mean instead of the median
    bounds (float): if use_mean=True, the multiplier on the standard deviation for upper and lower bounds (default 2)
    output (bool): whether to return the "reduced" sim (in any case, modify the multisim in-place)

**Example**::

    msim = ss.MultiSim(ss.Sim())
    msim.run()
    msim.reduce()
    msim.summarize()

##### reset { #starsim.run.MultiSim.reset }

```python
run.MultiSim.reset()
```

Undo reduce() by resetting the base sim, which, and results

##### run { #starsim.run.MultiSim.run }

```python
run.MultiSim.run(**kwargs)
```

Run the sims; see ``ss.multi_run()`` for additional arguments

Args:
    n_runs (int): how many replicates of each sim to run (if a list of sims is not provided)
    inplace (bool): whether to modify the sims in place (otherwise return copies)
    kwargs (dict): passed to multi_run(); use run_args to pass arguments to sim.run()

Returns:
    None (modifies MultiSim object in place)

##### show { #starsim.run.MultiSim.show }

```python
run.MultiSim.show(output=False)
```

Print a moderate length summary of the MultiSim. See also multisim.disp()
(detailed output) and multisim.brief() (short output).

Args:
    output (bool): if true, return a string instead of printing output

**Example**::

    msim = ss.MultiSim(ss.demo(run=False), label='Example multisim')
    msim.run()
    msim.show() # Prints moderate length output

##### shrink { #starsim.run.MultiSim.shrink }

```python
run.MultiSim.shrink(**kwargs)
```

Not to be confused with reduce(), this shrinks each sim in the msim;
see sim.shrink() for more information.

Args:
    kwargs (dict): passed to sim.shrink() for each sim

##### summarize { #starsim.run.MultiSim.summarize }

```python
run.MultiSim.summarize(method='mean', quantiles=None, how='default')
```

Summarize the simulations statistically.

Args:
    method (str): one of 'mean' (default: [mean, 2*std]), 'median' ([median, min, max]), or 'all' (all results)
    quantiles (dict): if method='median', use these quantiles
    how (str): passed to sim.summarize()

## Functions

| Name | Description |
| --- | --- |
| [multi_run](#starsim.run.multi_run) | For running multiple sims in parallel. If the first argument is a list of sims |
| [parallel](#starsim.run.parallel) | A shortcut to ``ss.MultiSim()``, allowing the quick running of multiple simulations |
| [single_run](#starsim.run.single_run) | Convenience function to perform a single simulation run. Mostly used for |

### multi_run { #starsim.run.multi_run }

```python
run.multi_run(
    sim,
    n_runs=4,
    reseed=None,
    iterpars=None,
    shrink=None,
    run_args=None,
    sim_args=None,
    par_args=None,
    do_run=True,
    parallel=True,
    n_cpus=None,
    verbose=None,
    **kwargs,
)
```

For running multiple sims in parallel. If the first argument is a list of sims
rather than a single sim, exactly these will be run and most other arguments
will be ignored.

Args:
    sim         (Sim/list): the sim instance to be run, or a list of sims.
    n_runs      (int)   : the number of parallel runs
    reseed      (bool)  : whether or not to generate a fresh seed for each run (default: true for single, false for list of sims)
    iterpars    (dict)  : any other parameters to iterate over the runs; see sc.parallelize() for syntax
    shrink      (bool)  : whether to shrink the sim after the sim run
    run_args    (dict)  : arguments passed to sim.run()
    sim_args    (dict)  : extra parameters to pass to the sim
    par_args    (dict)  : arguments passed to sc.parallelize()
    do_run      (bool)  : whether to actually run the sim (if not, just initialize it)
    parallel    (bool)  : whether to run in parallel using multiprocessing (else, just run in a loop)
    n_cpus      (int)   : the number of CPUs to run on (if blank, set automatically; otherwise, passed to par_args)
    verbose     (int)   : detail to print
    kwargs      (dict)  : also passed to the sim

Returns:
    If combine is True, a single sim object with the combined results from each sim.
    Otherwise, a list of sim objects (default).

**Example**::

    import starsim as ss
    sim = ss.Sim()
    sims = ss.multi_run(sim, n_runs=6)

### parallel { #starsim.run.parallel }

```python
run.parallel(*args, **kwargs)
```

A shortcut to ``ss.MultiSim()``, allowing the quick running of multiple simulations
at once.

Args:
    args (list): The simulations to run
    kwargs (dict): passed to multi_run()

Returns:
    A run MultiSim object.

**Examples**::

    s1 = ss.Sim(n_agents=1000, label='Small', diseases='sis', networks='random')
    s2 = ss.Sim(n_agents=2000, label='Large', diseases='sis', networks='random')
    ss.parallel(s1, s2).plot()
    msim = ss.parallel([s1, s2], shrink=False)

### single_run { #starsim.run.single_run }

```python
run.single_run(
    sim,
    ind=0,
    reseed=True,
    shrink=True,
    run_args=None,
    sim_args=None,
    verbose=None,
    do_run=True,
    **kwargs,
)
```

Convenience function to perform a single simulation run. Mostly used for
parallelization, but can also be used directly.

Args:
    sim         (Sim)   : the sim instance to be run
    ind         (int)   : the index of this sim
    reseed      (bool)  : whether to generate a fresh seed for each run
    noise       (float) : the amount of noise to add to each run
    noisepar    (str)   : the name of the parameter to add noise to
    shrink      (bool)  : whether to shrink the sim after the sim run
    run_args    (dict)  : arguments passed to sim.run()
    sim_args    (dict)  : extra parameters to pass to the sim, e.g. 'n_infected'
    verbose     (int)   : detail to print
    do_run      (bool)  : whether to actually run the sim (if not, just initialize it)
    kwargs      (dict)  : also passed to the sim

Returns:
    sim (Sim): a single sim object with results

**Example**::

    import starsim as ss
    sim = ss.Sim() # Create a default simulation
    sim = ss.single_run(sim) # Run it, equivalent(ish) to sim.run()