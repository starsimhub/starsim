# distributions { #starsim.distributions }

`distributions`

Define random-number-safe distributions.

## Classes

| Name | Description |
| --- | --- |
| [Dist](#starsim.distributions.Dist) | Base class for tracking one random number generator associated with one distribution, |
| [Dists](#starsim.distributions.Dists) | Class for managing a collection of Dist objects |
| [multi_random](#starsim.distributions.multi_random) | A class for holding two or more ss.random() distributions, and generating |

### Dist { #starsim.distributions.Dist }

```python
distributions.Dist(
    self,
    dist=None,
    distname=None,
    name=None,
    seed=None,
    offset=None,
    strict=True,
    auto=True,
    sim=None,
    module=None,
    debug=False,
    **kwargs,
)
```

Base class for tracking one random number generator associated with one distribution,
i.e. one decision per timestep.

See ss.dist_list for a full list of supported distributions.

Although it's possible in theory to define a custom distribution (i.e., not
one from NumPy or SciPy), in practice this is difficult. The distribution needs
to have both a way to return random variates (easy), as well as the probability
point function (inverse CDF). In addition, the distribution must be able to
take a NumPy RNG as its bit generator. It's easier to just use a default Dist
(e.g., ss.random()), and then take its output as input (i.e., quantiles) for
whatever custom distribution you want to create.

Args:
    dist (rv_generic): optional; a scipy.stats distribution (frozen or not) to get the ppf from
    distname (str): the name for this class of distribution (e.g. "uniform")
    name (str): the name for this particular distribution (e.g. "age_at_death")
    seed (int): the user-chosen random seed (e.g. 3)
    offset (int): the seed offset; will be automatically assigned (based on hashing the name) if None
    strict (bool): if True, require initialization and invalidate after each call to rvs()
    auto (bool): whether to auto-reset the state after each draw
    sim (Sim): usually determined on initialization; the sim to use as input to callable parameters
    module (Module): usually determined on initialization; the module to use as input to callable parameters
    kwargs (dict): parameters of the distribution

**Examples**::

    dist = ss.Dist(sps.norm, loc=3)
    dist.rvs(10) # Return 10 normally distributed random numbers

#### Attributes

| Name | Description |
| --- | --- |
| [state](#starsim.distributions.Dist.state) | Get the current state |
| [state_int](#starsim.distributions.Dist.state_int) | Get the integer corresponding to the current state |

#### Methods

| Name | Description |
| --- | --- |
| [call_par](#starsim.distributions.Dist.call_par) | Check if this parameter needs to be called to be turned into an array; not for the user |
| [call_pars](#starsim.distributions.Dist.call_pars) | Check if any parameters need to be called to be turned into arrays; not for the user |
| [convert_callable](#starsim.distributions.Dist.convert_callable) | Method to handle how callable parameters are processed; not for the user |
| [disp](#starsim.distributions.Dist.disp) | Return full display of object |
| [get_state](#starsim.distributions.Dist.get_state) | Return a copy of the state |
| [init](#starsim.distributions.Dist.init) | Calculate the starting seed and create the RNG |
| [jump](#starsim.distributions.Dist.jump) | Advance the RNG, e.g. to timestep "to", by jumping |
| [jump_dt](#starsim.distributions.Dist.jump_dt) | Automatically jump on the next value of dt |
| [link_module](#starsim.distributions.Dist.link_module) | Shortcut for linking the module |
| [link_sim](#starsim.distributions.Dist.link_sim) | Shortcut for linking the sim, only overwriting an existing one if overwrite=True; not for the user |
| [make_history](#starsim.distributions.Dist.make_history) | Store the current state in history |
| [make_rvs](#starsim.distributions.Dist.make_rvs) | Return default random numbers for scalar parameters; not for the user |
| [plot_hist](#starsim.distributions.Dist.plot_hist) | Plot the current state of the RNG as a histogram |
| [postprocess_timepar](#starsim.distributions.Dist.postprocess_timepar) | Scale random variates after generation; not for the user |
| [ppf](#starsim.distributions.Dist.ppf) | Return default random numbers for array parameters; not for the user |
| [preprocess_timepar](#starsim.distributions.Dist.preprocess_timepar) | Method to handle how timepars are processed; not for the user. By default, scales the output of the distribution. |
| [process_dist](#starsim.distributions.Dist.process_dist) | Ensure the distribution works; not for the user |
| [process_pars](#starsim.distributions.Dist.process_pars) | Ensure the supplied dist and parameters are valid, and initialize them; not for the user |
| [process_seed](#starsim.distributions.Dist.process_seed) | Obtain the seed offset by hashing the path to this distribution; not for the user |
| [process_size](#starsim.distributions.Dist.process_size) | Handle an input of either size or UIDs and calculate size, UIDs, and slots; not for the user |
| [rand](#starsim.distributions.Dist.rand) | Simple way to get simple random numbers |
| [reset](#starsim.distributions.Dist.reset) | Restore state, allowing the same numbers to be resampled |
| [rvs](#starsim.distributions.Dist.rvs) | Get random variates -- use this! |
| [set](#starsim.distributions.Dist.set) | Set (change) the distribution type, or one or more parameters of the distribution |
| [show_state](#starsim.distributions.Dist.show_state) | Show the state of the object |
| [sync_pars](#starsim.distributions.Dist.sync_pars) | Perform any necessary synchronizations or transformations on distribution parameters; not for the user |
| [to_json](#starsim.distributions.Dist.to_json) | Return a dictionary representation of the Dist |
| [update_dist_pars](#starsim.distributions.Dist.update_dist_pars) | Update SciPy distribution parameters; not for the user |

##### call_par { #starsim.distributions.Dist.call_par }

```python
distributions.Dist.call_par(key, val, size, uids)
```

Check if this parameter needs to be called to be turned into an array; not for the user

##### call_pars { #starsim.distributions.Dist.call_pars }

```python
distributions.Dist.call_pars()
```

Check if any parameters need to be called to be turned into arrays; not for the user

##### convert_callable { #starsim.distributions.Dist.convert_callable }

```python
distributions.Dist.convert_callable(key, val, size, uids)
```

Method to handle how callable parameters are processed; not for the user

##### disp { #starsim.distributions.Dist.disp }

```python
distributions.Dist.disp()
```

Return full display of object

##### get_state { #starsim.distributions.Dist.get_state }

```python
distributions.Dist.get_state()
```

Return a copy of the state

##### init { #starsim.distributions.Dist.init }

```python
distributions.Dist.init(
    trace=None,
    seed=None,
    module=None,
    sim=None,
    slots=None,
    force=False,
)
```

Calculate the starting seed and create the RNG

##### jump { #starsim.distributions.Dist.jump }

```python
distributions.Dist.jump(to=None, delta=1, force=False)
```

Advance the RNG, e.g. to timestep "to", by jumping

##### jump_dt { #starsim.distributions.Dist.jump_dt }

```python
distributions.Dist.jump_dt(ti=None, force=False)
```

Automatically jump on the next value of dt

Args:
    ti (int): if specified, jump to this timestep (default: current module timestep plus one)

##### link_module { #starsim.distributions.Dist.link_module }

```python
distributions.Dist.link_module(module=None, overwrite=False)
```

Shortcut for linking the module

##### link_sim { #starsim.distributions.Dist.link_sim }

```python
distributions.Dist.link_sim(sim=None, overwrite=False)
```

Shortcut for linking the sim, only overwriting an existing one if overwrite=True; not for the user

##### make_history { #starsim.distributions.Dist.make_history }

```python
distributions.Dist.make_history(reset=False)
```

Store the current state in history

##### make_rvs { #starsim.distributions.Dist.make_rvs }

```python
distributions.Dist.make_rvs()
```

Return default random numbers for scalar parameters; not for the user

##### plot_hist { #starsim.distributions.Dist.plot_hist }

```python
distributions.Dist.plot_hist(n=1000, bins=None, fig_kw=None, hist_kw=None)
```

Plot the current state of the RNG as a histogram

##### postprocess_timepar { #starsim.distributions.Dist.postprocess_timepar }

```python
distributions.Dist.postprocess_timepar(rvs)
```

Scale random variates after generation; not for the user

##### ppf { #starsim.distributions.Dist.ppf }

```python
distributions.Dist.ppf(rands)
```

Return default random numbers for array parameters; not for the user

##### preprocess_timepar { #starsim.distributions.Dist.preprocess_timepar }

```python
distributions.Dist.preprocess_timepar(key, timepar)
```

Method to handle how timepars are processed; not for the user. By default, scales the output of the distribution.

##### process_dist { #starsim.distributions.Dist.process_dist }

```python
distributions.Dist.process_dist()
```

Ensure the distribution works; not for the user

##### process_pars { #starsim.distributions.Dist.process_pars }

```python
distributions.Dist.process_pars(call=True)
```

Ensure the supplied dist and parameters are valid, and initialize them; not for the user

##### process_seed { #starsim.distributions.Dist.process_seed }

```python
distributions.Dist.process_seed(trace=None, seed=None)
```

Obtain the seed offset by hashing the path to this distribution; not for the user

##### process_size { #starsim.distributions.Dist.process_size }

```python
distributions.Dist.process_size(n=1)
```

Handle an input of either size or UIDs and calculate size, UIDs, and slots; not for the user

##### rand { #starsim.distributions.Dist.rand }

```python
distributions.Dist.rand(size)
```

Simple way to get simple random numbers

##### reset { #starsim.distributions.Dist.reset }

```python
distributions.Dist.reset(state=0)
```

Restore state, allowing the same numbers to be resampled

Use 0 for original state, -1 for most recent state.

**Example**::

    dist = ss.random(seed=5).init()
    r1 = dist(5)
    r2 = dist(5)
    dist.reset(-1)
    r3 = dist(5)
    dist.reset(0)
    r4 = dist(5)
    assert all(r1 != r2)
    assert all(r2 == r3)
    assert all(r4 == r1)

##### rvs { #starsim.distributions.Dist.rvs }

```python
distributions.Dist.rvs(n=1, reset=False)
```

Get random variates -- use this!

Args:
    n (int/tuple/arr): if an int or tuple, return this many random variates; if an array, treat as UIDs
    reset (bool): whether to automatically reset the random number distribution state after being called

##### set { #starsim.distributions.Dist.set }

```python
distributions.Dist.set(*args, dist=None, **kwargs)
```

Set (change) the distribution type, or one or more parameters of the distribution

##### show_state { #starsim.distributions.Dist.show_state }

```python
distributions.Dist.show_state(output=False)
```

Show the state of the object

##### sync_pars { #starsim.distributions.Dist.sync_pars }

```python
distributions.Dist.sync_pars()
```

Perform any necessary synchronizations or transformations on distribution parameters; not for the user

##### to_json { #starsim.distributions.Dist.to_json }

```python
distributions.Dist.to_json()
```

Return a dictionary representation of the Dist

##### update_dist_pars { #starsim.distributions.Dist.update_dist_pars }

```python
distributions.Dist.update_dist_pars(pars=None)
```

Update SciPy distribution parameters; not for the user

### Dists { #starsim.distributions.Dists }

```python
distributions.Dists(self, obj=None, *args, base_seed=None, sim=None)
```

Class for managing a collection of Dist objects

#### Methods

| Name | Description |
| --- | --- |
| [check_seeds](#starsim.distributions.Dists.check_seeds) | Check that no two distributions share the same seed |
| [copy_to_module](#starsim.distributions.Dists.copy_to_module) | Copy the Sim's Dists object to the specified module |
| [init](#starsim.distributions.Dists.init) | Set the base seed, find and initialize all distributions in an object |
| [jump](#starsim.distributions.Dists.jump) | Advance all RNGs, e.g. to call "to", by jumping |
| [jump_dt](#starsim.distributions.Dists.jump_dt) | Advance all RNGs to the next timestep |
| [reset](#starsim.distributions.Dists.reset) | Reset each RNG |

##### check_seeds { #starsim.distributions.Dists.check_seeds }

```python
distributions.Dists.check_seeds()
```

Check that no two distributions share the same seed

##### copy_to_module { #starsim.distributions.Dists.copy_to_module }

```python
distributions.Dists.copy_to_module(module)
```

Copy the Sim's Dists object to the specified module

##### init { #starsim.distributions.Dists.init }

```python
distributions.Dists.init(obj=None, base_seed=None, sim=None, force=False)
```

Set the base seed, find and initialize all distributions in an object

In practice, the object is usually a Sim, but can be anything.

##### jump { #starsim.distributions.Dists.jump }

```python
distributions.Dists.jump(to=None, delta=1, force=False)
```

Advance all RNGs, e.g. to call "to", by jumping

##### jump_dt { #starsim.distributions.Dists.jump_dt }

```python
distributions.Dists.jump_dt(ti=None, force=False)
```

Advance all RNGs to the next timestep

Args:
    ti (int): if specified, jump to this timestep (default: current sim timestep)

##### reset { #starsim.distributions.Dists.reset }

```python
distributions.Dists.reset()
```

Reset each RNG

### multi_random { #starsim.distributions.multi_random }

```python
distributions.multi_random(self, names, *args, **kwargs)
```

A class for holding two or more ss.random() distributions, and generating
random numbers linked to each of them. Useful for e.g. pairwise transmission
probabilities.

See ss.combine_rands() for the manual version; in almost all cases this class
should be used instead.

Usage:
    multi = ss.multi_random('source', 'target')
    rvs = multi.rvs(source_uids, target_uids)

#### Methods

| Name | Description |
| --- | --- |
| [combine_rvs](#starsim.distributions.multi_random.combine_rvs) | Combine inputs into one number |
| [init](#starsim.distributions.multi_random.init) | Not usually needed since each dist will handle this automatically; for completeness only |
| [jump](#starsim.distributions.multi_random.jump) | Not usually needed since each dist will handle this automatically; for completeness only |
| [reset](#starsim.distributions.multi_random.reset) | Not usually needed since each dist will handle this automatically; for completeness only |
| [rvs](#starsim.distributions.multi_random.rvs) | Get random variates from each of the underlying distributions and combine them efficiently |

##### combine_rvs { #starsim.distributions.multi_random.combine_rvs }

```python
distributions.multi_random.combine_rvs(rvs_list, int_type, int_max)
```

Combine inputs into one number

##### init { #starsim.distributions.multi_random.init }

```python
distributions.multi_random.init(*args, **kwargs)
```

Not usually needed since each dist will handle this automatically; for completeness only

##### jump { #starsim.distributions.multi_random.jump }

```python
distributions.multi_random.jump(*args, **kwargs)
```

Not usually needed since each dist will handle this automatically; for completeness only

##### reset { #starsim.distributions.multi_random.reset }

```python
distributions.multi_random.reset(*args, **kwargs)
```

Not usually needed since each dist will handle this automatically; for completeness only

##### rvs { #starsim.distributions.multi_random.rvs }

```python
distributions.multi_random.rvs(*args)
```

Get random variates from each of the underlying distributions and combine them efficiently

## Functions

| Name | Description |
| --- | --- |
| [link_dists](#starsim.distributions.link_dists) | Link distributions to the sim and the module; used in module.init() and people.init() |
| [make_dist](#starsim.distributions.make_dist) | Make a distribution from a dictionary |

### link_dists { #starsim.distributions.link_dists }

```python
distributions.link_dists(
    obj,
    sim,
    module=None,
    overwrite=False,
    init=False,
    **kwargs,
)
```

Link distributions to the sim and the module; used in module.init() and people.init()

### make_dist { #starsim.distributions.make_dist }

```python
distributions.make_dist(pars=None, **kwargs)
```

Make a distribution from a dictionary