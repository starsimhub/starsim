# interventions { #starsim.interventions }

`interventions`

Define interventions

## Classes

| Name | Description |
| --- | --- |
| [BaseScreening](#starsim.interventions.BaseScreening) | Base class for screening. |
| [BaseTest](#starsim.interventions.BaseTest) | Base class for screening and triage. |
| [BaseTreatment](#starsim.interventions.BaseTreatment) | Base treatment class. |
| [BaseTriage](#starsim.interventions.BaseTriage) | Base class for triage. |
| [BaseVaccination](#starsim.interventions.BaseVaccination) | Base vaccination class for determining who will receive a vaccine. |
| [CampaignDelivery](#starsim.interventions.CampaignDelivery) | Base class for any intervention that uses campaign delivery; handles interpolation of input years. |
| [Intervention](#starsim.interventions.Intervention) | Base class for interventions. |
| [RoutineDelivery](#starsim.interventions.RoutineDelivery) | Base class for any intervention that uses routine delivery; handles interpolation of input years. |
| [campaign_screening](#starsim.interventions.campaign_screening) | Campaign screening - an instance of base screening combined with campaign delivery. |
| [campaign_triage](#starsim.interventions.campaign_triage) | Campaign triage - an instance of base triage combined with campaign delivery. |
| [campaign_vx](#starsim.interventions.campaign_vx) | Campaign vaccination - an instance of base vaccination combined with campaign delivery. |
| [routine_screening](#starsim.interventions.routine_screening) | Routine screening - an instance of base screening combined with routine delivery. |
| [routine_triage](#starsim.interventions.routine_triage) | Routine triage - an instance of base triage combined with routine delivery. |
| [routine_vx](#starsim.interventions.routine_vx) | Routine vaccination - an instance of base vaccination combined with routine delivery. |
| [treat_num](#starsim.interventions.treat_num) | Treat a fixed number of people each timestep. |

### BaseScreening { #starsim.interventions.BaseScreening }

```python
interventions.BaseScreening(
    self,
    product=None,
    prob=None,
    eligibility=None,
    **kwargs,
)
```

Base class for screening.

Args:
    kwargs (dict): passed to BaseTest

#### Methods

| Name | Description |
| --- | --- |
| [check_eligibility](#starsim.interventions.BaseScreening.check_eligibility) | Check eligibility |
| [step](#starsim.interventions.BaseScreening.step) | Perform screening by finding who's eligible, finding who accepts, and applying the product. |

##### check_eligibility { #starsim.interventions.BaseScreening.check_eligibility }

```python
interventions.BaseScreening.check_eligibility()
```

Check eligibility

##### step { #starsim.interventions.BaseScreening.step }

```python
interventions.BaseScreening.step()
```

Perform screening by finding who's eligible, finding who accepts, and applying the product.

### BaseTest { #starsim.interventions.BaseTest }

```python
interventions.BaseTest(
    self,
    product=None,
    prob=None,
    eligibility=None,
    **kwargs,
)
```

Base class for screening and triage.

Args:
     product        (Product)       : the diagnostic to use
     prob           (float/arr)     : annual probability of eligible people receiving the diagnostic
     eligibility    (inds/callable) : indices OR callable that returns inds
     kwargs         (dict)          : passed to Intervention()

#### Methods

| Name | Description |
| --- | --- |
| [deliver](#starsim.interventions.BaseTest.deliver) | Deliver the diagnostics by finding who's eligible, finding who accepts, and applying the product. |

##### deliver { #starsim.interventions.BaseTest.deliver }

```python
interventions.BaseTest.deliver()
```

Deliver the diagnostics by finding who's eligible, finding who accepts, and applying the product.

### BaseTreatment { #starsim.interventions.BaseTreatment }

```python
interventions.BaseTreatment(
    self,
    product=None,
    prob=None,
    eligibility=None,
    **kwargs,
)
```

Base treatment class.

Args:
     product        (str/Product)   : the treatment product to use
     prob           (float/arr)     : probability of treatment aong those eligible
     eligibility    (inds/callable) : indices OR callable that returns inds
     kwargs         (dict)          : passed to Intervention()

#### Methods

| Name | Description |
| --- | --- |
| [get_accept_inds](#starsim.interventions.BaseTreatment.get_accept_inds) | Get indices of people who will acccept treatment; these people are then added to a queue or scheduled for receiving treatment |
| [get_candidates](#starsim.interventions.BaseTreatment.get_candidates) | Get candidates for treatment on this timestep. Implemented by derived classes. |
| [step](#starsim.interventions.BaseTreatment.step) | Perform treatment by getting candidates, checking their eligibility, and then treating them. |

##### get_accept_inds { #starsim.interventions.BaseTreatment.get_accept_inds }

```python
interventions.BaseTreatment.get_accept_inds()
```

Get indices of people who will acccept treatment; these people are then added to a queue or scheduled for receiving treatment

##### get_candidates { #starsim.interventions.BaseTreatment.get_candidates }

```python
interventions.BaseTreatment.get_candidates()
```

Get candidates for treatment on this timestep. Implemented by derived classes.

##### step { #starsim.interventions.BaseTreatment.step }

```python
interventions.BaseTreatment.step()
```

Perform treatment by getting candidates, checking their eligibility, and then treating them.

### BaseTriage { #starsim.interventions.BaseTriage }

```python
interventions.BaseTriage(
    self,
    product=None,
    prob=None,
    eligibility=None,
    **kwargs,
)
```

Base class for triage.

Args:
    kwargs (dict): passed to BaseTest

### BaseVaccination { #starsim.interventions.BaseVaccination }

```python
interventions.BaseVaccination(
    self,
    *args,
    product=None,
    prob=None,
    label=None,
    **kwargs,
)
```

Base vaccination class for determining who will receive a vaccine.

Args:
     product        (str/Product)   : the vaccine to use
     prob           (float/arr)     : annual probability of eligible population getting vaccinated
     eligibility    (inds/callable) : indices OR callable that returns inds
     label          (str)           : the name of vaccination strategy
     kwargs         (dict)          : passed to Intervention()

#### Methods

| Name | Description |
| --- | --- |
| [step](#starsim.interventions.BaseVaccination.step) | Deliver the diagnostics by finding who's eligible, finding who accepts, and applying the product. |

##### step { #starsim.interventions.BaseVaccination.step }

```python
interventions.BaseVaccination.step()
```

Deliver the diagnostics by finding who's eligible, finding who accepts, and applying the product.

### CampaignDelivery { #starsim.interventions.CampaignDelivery }

```python
interventions.CampaignDelivery(
    self,
    *args,
    years=None,
    interpolate=None,
    prob=None,
    **kwargs,
)
```

Base class for any intervention that uses campaign delivery; handles interpolation of input years.

### Intervention { #starsim.interventions.Intervention }

```python
interventions.Intervention(self, *args, eligibility=None, **kwargs)
```

Base class for interventions.

The key method of the intervention is ``step()``, which is called with the sim
on each timestep.

#### Attributes

| Name | Description |
| --- | --- |
| [has_product](#starsim.interventions.Intervention.has_product) | Check if the intervention has a product |

#### Methods

| Name | Description |
| --- | --- |
| [check_eligibility](#starsim.interventions.Intervention.check_eligibility) | Return an array of indices of agents eligible for screening at time t |

##### check_eligibility { #starsim.interventions.Intervention.check_eligibility }

```python
interventions.Intervention.check_eligibility()
```

Return an array of indices of agents eligible for screening at time t

### RoutineDelivery { #starsim.interventions.RoutineDelivery }

```python
interventions.RoutineDelivery(
    self,
    *args,
    years=None,
    start_year=None,
    end_year=None,
    prob=None,
    annual_prob=True,
    **kwargs,
)
```

Base class for any intervention that uses routine delivery; handles interpolation of input years.

### campaign_screening { #starsim.interventions.campaign_screening }

```python
interventions.campaign_screening(
    self,
    product=None,
    prob=None,
    eligibility=None,
    **kwargs,
)
```

Campaign screening - an instance of base screening combined with campaign delivery.
See base classes for a description of input arguments.

**Examples**::

    screen1 = ss.campaign_screening(product=my_prod, prob=0.2, years=2030) # Screen 20% of the eligible population in 2020
    screen2 = ss.campaign_screening(product=my_prod, prob=0.02, years=[2025,2030]) # Screen 20% of the eligible population in 2025 and again in 2030

### campaign_triage { #starsim.interventions.campaign_triage }

```python
interventions.campaign_triage(
    self,
    product=None,
    prob=None,
    eligibility=None,
    **kwargs,
)
```

Campaign triage - an instance of base triage combined with campaign delivery.
See base classes for a description of input arguments.

**Examples**:
    # Example: In 2030, triage all positive screens into confirmatory testing
    screened_pos = lambda sim: sim.interventions.screening.outcomes['positive']
    triage1 = ss.campaign_triage(product=my_triage, eligibility=screen_pos, prob=0.9, years=2030)

### campaign_vx { #starsim.interventions.campaign_vx }

```python
interventions.campaign_vx(
    self,
    *args,
    product=None,
    prob=None,
    label=None,
    **kwargs,
)
```

Campaign vaccination - an instance of base vaccination combined with campaign delivery.
See base classes for a description of input arguments.

### routine_screening { #starsim.interventions.routine_screening }

```python
interventions.routine_screening(
    self,
    product=None,
    prob=None,
    eligibility=None,
    **kwargs,
)
```

Routine screening - an instance of base screening combined with routine delivery.
See base classes for a description of input arguments.

**Examples**::

    screen1 = ss.routine_screening(product=my_prod, prob=0.02) # Screen 2% of the eligible population every year
    screen2 = ss.routine_screening(product=my_prod, prob=0.02, start_year=2020) # Screen 2% every year starting in 2020
    screen3 = ss.routine_screening(product=my_prod, prob=np.linspace(0.005,0.025,5), years=np.arange(2020,2025)) # Scale up screening over 5 years starting in 2020

### routine_triage { #starsim.interventions.routine_triage }

```python
interventions.routine_triage(
    self,
    product=None,
    prob=None,
    eligibility=None,
    **kwargs,
)
```

Routine triage - an instance of base triage combined with routine delivery.
See base classes for a description of input arguments.

**Example**:
    # Example: Triage positive screens into confirmatory testing
    screened_pos = lambda sim: sim.interventions.screening.outcomes['positive']
    triage = ss.routine_triage(product=my_triage, eligibility=screen_pos, prob=0.9, start_year=2030)

### routine_vx { #starsim.interventions.routine_vx }

```python
interventions.routine_vx(
    self,
    *args,
    product=None,
    prob=None,
    label=None,
    **kwargs,
)
```

Routine vaccination - an instance of base vaccination combined with routine delivery.
See base classes for a description of input arguments.

### treat_num { #starsim.interventions.treat_num }

```python
interventions.treat_num(self, max_capacity=None, **kwargs)
```

Treat a fixed number of people each timestep.

Args:
     max_capacity (int): maximum number who can be treated each timestep

#### Methods

| Name | Description |
| --- | --- |
| [add_to_queue](#starsim.interventions.treat_num.add_to_queue) | Add people who are willing to accept treatment to the queue |
| [get_candidates](#starsim.interventions.treat_num.get_candidates) | Get the indices of people who are candidates for treatment |
| [step](#starsim.interventions.treat_num.step) | Apply treatment. On each timestep, this method will add eligible people who are willing to accept treatment to a |

##### add_to_queue { #starsim.interventions.treat_num.add_to_queue }

```python
interventions.treat_num.add_to_queue()
```

Add people who are willing to accept treatment to the queue

##### get_candidates { #starsim.interventions.treat_num.get_candidates }

```python
interventions.treat_num.get_candidates()
```

Get the indices of people who are candidates for treatment

##### step { #starsim.interventions.treat_num.step }

```python
interventions.treat_num.step()
```

Apply treatment. On each timestep, this method will add eligible people who are willing to accept treatment to a
queue, and then will treat as many people in the queue as there is capacity for.