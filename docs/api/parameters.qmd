# parameters { #starsim.parameters }

`parameters`

Set parameters

## Classes

| Name | Description |
| --- | --- |
| [Pars](#starsim.parameters.Pars) | Dict-like container of parameters |
| [SimPars](#starsim.parameters.SimPars) | Create the parameters for the simulation. Typically, this function is used |

### Pars { #starsim.parameters.Pars }

```python
parameters.Pars(self, pars=None, **kwargs)
```

Dict-like container of parameters

Acts like an ``sc.objdict()``, except that adding new keys are disallowed by
default, and auto-updates known types.

#### Methods

| Name | Description |
| --- | --- |
| [check_key_mismatch](#starsim.parameters.Pars.check_key_mismatch) | Check whether additional keys are being added to the dictionary |
| [dict_update](#starsim.parameters.Pars.dict_update) | Redefine default dict.update(), since overwritten in this class; should not usually be used |
| [to_json](#starsim.parameters.Pars.to_json) | Convert to JSON representation |
| [update](#starsim.parameters.Pars.update) | Update internal dict with new pars. |

##### check_key_mismatch { #starsim.parameters.Pars.check_key_mismatch }

```python
parameters.Pars.check_key_mismatch(pars)
```

Check whether additional keys are being added to the dictionary

##### dict_update { #starsim.parameters.Pars.dict_update }

```python
parameters.Pars.dict_update(*args, **kwargs)
```

Redefine default dict.update(), since overwritten in this class; should not usually be used

##### to_json { #starsim.parameters.Pars.to_json }

```python
parameters.Pars.to_json(**kwargs)
```

Convert to JSON representation

##### update { #starsim.parameters.Pars.update }

```python
parameters.Pars.update(pars=None, create=False, **kwargs)
```

Update internal dict with new pars.

Args:
    pars (dict): the parameters to update (if None, do nothing)
    create (bool): if create is False, then raise a KeyNotFoundError if the key does not already exist
    kwargs (dict): merged with pars

### SimPars { #starsim.parameters.SimPars }

```python
parameters.SimPars(self, **kwargs)
```

Create the parameters for the simulation. Typically, this function is used
internally rather than called by the user; e.g. typical use would be to do
sim = ss.Sim() and then inspect sim.pars, rather than calling this function
directly.

Args:
    label (str): The name of the simulation
    n_agents (int/float): The number of agents to run (default 10,000)
    total_pop (int/float): If provided, scale the agents to this effective population size
    pop_scale (float): If provided, use this agent-to-population scale factor (total_pop = n_agents*pop_scale)
    unit (str): The time unit for the simulation (default 'year'; other choices are 'day', 'week', 'month')
    start (float/str/date): The starting date for the simulation (default 2000); can be a year or date
    stop (float/str/date): If provided, the ending date for the simulation (if not provided, calculate from "dur")
    dur (int): How many timesteps to simulate, if "stop" is not provided (default 50)
    dt (float): The timestep, in units of "unit" (default 1.0)
    rand_seed (int): The overall random seed for the simulation (used to set module-specific random seeds)
    birth_rate (float): If provided, include births with this rate (per 1000 people per year)
    death_rate (float): If provided, include deaths with this rate (per 1000 people per year)
    use_aging (bool): Specify whether agents age (by default, agents age if and only if births and/or deaths are included)
    people (People): If provided, use a pre-existing People object rather than creating one (in which case n_agents will be ignored)
    networks (str/list/Module): The network module(s); can be a string, single module (i.e. Network), or list
    demographics (str/list/Module): As above
    diseases (str/list/Module): As above
    connectors (str/list/Module): As above
    interventions (str/list/Module): As above
    analyzers (str/list/Module): As above
    verbose (float): How much detail to print (1 = every timestep, 0.1 = every 10 timesteps, etc.)

#### Methods

| Name | Description |
| --- | --- |
| [convert_modules](#starsim.parameters.SimPars.convert_modules) | Convert different types of representations for modules into a |
| [is_default](#starsim.parameters.SimPars.is_default) | Check if the provided value matches the default |
| [validate](#starsim.parameters.SimPars.validate) | Call parameter validation methods |
| [validate_agents](#starsim.parameters.SimPars.validate_agents) | Check that n_agents is supplied and convert to an integer |
| [validate_demographics](#starsim.parameters.SimPars.validate_demographics) | Validate demographics-related input parameters |
| [validate_modules](#starsim.parameters.SimPars.validate_modules) | Validate modules passed in pars |
| [validate_networks](#starsim.parameters.SimPars.validate_networks) | Validate networks |
| [validate_sim_pars](#starsim.parameters.SimPars.validate_sim_pars) | Validate each of the parameter values |
| [validate_time](#starsim.parameters.SimPars.validate_time) | Ensure at least one of dur and stop is defined, but not both |
| [validate_total_pop](#starsim.parameters.SimPars.validate_total_pop) | Ensure one but not both of total_pop and pop_scale are defined |
| [validate_verbose](#starsim.parameters.SimPars.validate_verbose) | Validate verbosity |

##### convert_modules { #starsim.parameters.SimPars.convert_modules }

```python
parameters.SimPars.convert_modules()
```

Convert different types of representations for modules into a
standardized object representation that can be parsed and used by
a Sim object.
Used for starsim classes:
- networks,
- demographics,
- diseases,
- analyzers,
- interventions, and
- connectors.

##### is_default { #starsim.parameters.SimPars.is_default }

```python
parameters.SimPars.is_default(key)
```

Check if the provided value matches the default

##### validate { #starsim.parameters.SimPars.validate }

```python
parameters.SimPars.validate()
```

Call parameter validation methods

##### validate_agents { #starsim.parameters.SimPars.validate_agents }

```python
parameters.SimPars.validate_agents()
```

Check that n_agents is supplied and convert to an integer

##### validate_demographics { #starsim.parameters.SimPars.validate_demographics }

```python
parameters.SimPars.validate_demographics()
```

Validate demographics-related input parameters

##### validate_modules { #starsim.parameters.SimPars.validate_modules }

```python
parameters.SimPars.validate_modules()
```

Validate modules passed in pars

##### validate_networks { #starsim.parameters.SimPars.validate_networks }

```python
parameters.SimPars.validate_networks()
```

Validate networks

##### validate_sim_pars { #starsim.parameters.SimPars.validate_sim_pars }

```python
parameters.SimPars.validate_sim_pars()
```

Validate each of the parameter values

##### validate_time { #starsim.parameters.SimPars.validate_time }

```python
parameters.SimPars.validate_time()
```

Ensure at least one of dur and stop is defined, but not both

##### validate_total_pop { #starsim.parameters.SimPars.validate_total_pop }

```python
parameters.SimPars.validate_total_pop()
```

Ensure one but not both of total_pop and pop_scale are defined

##### validate_verbose { #starsim.parameters.SimPars.validate_verbose }

```python
parameters.SimPars.validate_verbose()
```

Validate verbosity

## Functions

| Name | Description |
| --- | --- |
| [make_pars](#starsim.parameters.make_pars) | Shortcut for making a new instance of SimPars |

### make_pars { #starsim.parameters.make_pars }

```python
parameters.make_pars(**kwargs)
```

Shortcut for making a new instance of SimPars