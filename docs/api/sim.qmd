# sim { #starsim.sim }

`sim`

Define core Sim classes

## Classes

| Name | Description |
| --- | --- |
| [AlreadyRunError](#starsim.sim.AlreadyRunError) | Raised if trying to re-run an already-run sim without re-initializing |
| [Sim](#starsim.sim.Sim) | The Sim object |

### AlreadyRunError { #starsim.sim.AlreadyRunError }

```python
sim.AlreadyRunError()
```

Raised if trying to re-run an already-run sim without re-initializing

### Sim { #starsim.sim.Sim }

```python
sim.Sim(
    self,
    pars=None,
    label=None,
    people=None,
    demographics=None,
    diseases=None,
    networks=None,
    interventions=None,
    analyzers=None,
    connectors=None,
    copy_inputs=True,
    data=None,
    **kwargs,
)
```

The Sim object

All Starsim simulations run via the Sim class. It is responsible for initializing
and running all modules and generating results.

Args:
    pars (SimPars/dict): either an ss.SimPars object, or a nested dictionary; can include all other arguments
    label (str): the human-readable name of the simulation
    people (People): if provided, use this ss.People object
    demographics (str/Demographics/list): a string naming the demographics module to use, the module itself, or a list
    diseases (str/Disease/list): as above, for diseases
    networks (str/Network/list): as above, for networks
    interventions (str/Intervention/list): as above, for interventions
    analyzers (str/Analyzer/list): as above, for analyzers
    connectors (str/Connector/list): as above, for connectors
    copy_inputs (bool): if True, copy modules as they're inserted into the sim (allowing reuse in other sims, but meaning they won't be updated)
    data (df): a dataframe (or dict) of data, with a column "time" plus data of the form "module.result", e.g. "hiv.new_infections" (used for plotting only)
    kwargs (dict): merged with pars; see ss.SimPars for all parameter values

**Examples**::

    sim = ss.Sim(diseases='sir', networks='random') # Simplest Starsim sim; equivalent to ss.demo()
    sim = ss.Sim(diseases=ss.SIR(), networks=ss.RandomNet()) # Equivalent using objects instead of strings
    sim = ss.Sim(diseases=['sir', ss.SIS()], networks=['random', 'mf']) # Example using list inputs; can mix and match types

#### Attributes

| Name | Description |
| --- | --- |
| [modules](#starsim.sim.Sim.modules) | Return iterator over all Module instances (stored in standard places) in the Sim |

#### Methods

| Name | Description |
| --- | --- |
| [check_results_ready](#starsim.sim.Sim.check_results_ready) | Check that results are ready |
| [finalize](#starsim.sim.Sim.finalize) | Compute final results |
| [finish_step](#starsim.sim.Sim.finish_step) | Finish the simulation timestep |
| [init](#starsim.sim.Sim.init) | Perform all initializations for the sim |
| [init_data](#starsim.sim.Sim.init_data) | Initialize or add data to the sim |
| [init_dists](#starsim.sim.Sim.init_dists) | Initialize the distributions |
| [init_mod_vals](#starsim.sim.Sim.init_mod_vals) | Initialize values in other modules, including networks and time parameters |
| [init_mods_pre](#starsim.sim.Sim.init_mods_pre) | Initialize all the modules with the sim |
| [init_people](#starsim.sim.Sim.init_people) | Initialize people within the sim |
| [init_people_vals](#starsim.sim.Sim.init_people_vals) | Initialize the People states with actual values |
| [init_results](#starsim.sim.Sim.init_results) | Create initial results that are present in all simulations |
| [init_sim_attrs](#starsim.sim.Sim.init_sim_attrs) | Move initialized modules to the sim |
| [init_time](#starsim.sim.Sim.init_time) | Time indexing; derived values live in the sim rather than in the pars |
| [plot](#starsim.sim.Sim.plot) | Plot all results in the Sim object |
| [reset_time_pars](#starsim.sim.Sim.reset_time_pars) | Reset the time parameters in the modules; used for imposing the sim's timestep on the modules |
| [run](#starsim.sim.Sim.run) | Run the model once |
| [run_one_step](#starsim.sim.Sim.run_one_step) | Run a single sim step; only used for debugging purposes. |
| [save](#starsim.sim.Sim.save) | Save to disk as a gzipped pickle. |
| [shrink](#starsim.sim.Sim.shrink) | "Shrinks" the simulation by removing the people and other memory-intensive |
| [start_step](#starsim.sim.Sim.start_step) | Start the step -- only print progress; all actual changes happen in the modules |
| [summarize](#starsim.sim.Sim.summarize) | Provide a quick summary of the sim; returns the last entry for count and |
| [to_df](#starsim.sim.Sim.to_df) | Export results as a Pandas dataframe |
| [to_json](#starsim.sim.Sim.to_json) | Export results and parameters as JSON. |

##### check_results_ready { #starsim.sim.Sim.check_results_ready }

```python
sim.Sim.check_results_ready(errormsg=None)
```

Check that results are ready

##### finalize { #starsim.sim.Sim.finalize }

```python
sim.Sim.finalize()
```

Compute final results

##### finish_step { #starsim.sim.Sim.finish_step }

```python
sim.Sim.finish_step()
```

Finish the simulation timestep

##### init { #starsim.sim.Sim.init }

```python
sim.Sim.init(force=False, **kwargs)
```

Perform all initializations for the sim

Args:
    force (bool): whether to overwrite sim attributes even if they already exist
    kwargs (dict): passed to ss.People()

##### init_data { #starsim.sim.Sim.init_data }

```python
sim.Sim.init_data(data=None)
```

Initialize or add data to the sim

##### init_dists { #starsim.sim.Sim.init_dists }

```python
sim.Sim.init_dists()
```

Initialize the distributions

##### init_mod_vals { #starsim.sim.Sim.init_mod_vals }

```python
sim.Sim.init_mod_vals()
```

Initialize values in other modules, including networks and time parameters

##### init_mods_pre { #starsim.sim.Sim.init_mods_pre }

```python
sim.Sim.init_mods_pre()
```

Initialize all the modules with the sim

##### init_people { #starsim.sim.Sim.init_people }

```python
sim.Sim.init_people(verbose=None, **kwargs)
```

Initialize people within the sim
Sometimes the people are provided, in which case this just adds a few sim properties to them.
Other time people are not provided and this method makes them.

Args:
    verbose (int):  detail to print
    kwargs  (dict): passed to ss.People()

##### init_people_vals { #starsim.sim.Sim.init_people_vals }

```python
sim.Sim.init_people_vals()
```

Initialize the People states with actual values

##### init_results { #starsim.sim.Sim.init_results }

```python
sim.Sim.init_results()
```

Create initial results that are present in all simulations

##### init_sim_attrs { #starsim.sim.Sim.init_sim_attrs }

```python
sim.Sim.init_sim_attrs(force=False)
```

Move initialized modules to the sim

##### init_time { #starsim.sim.Sim.init_time }

```python
sim.Sim.init_time()
```

Time indexing; derived values live in the sim rather than in the pars

##### plot { #starsim.sim.Sim.plot }

```python
sim.Sim.plot(
    key=None,
    fig=None,
    style='fancy',
    show_data=True,
    show_skipped=False,
    show_module=26,
    show_label=False,
    fig_kw=None,
    plot_kw=None,
    scatter_kw=None,
)
```

Plot all results in the Sim object

Args:
    key (str/list): the results key to plot (by default, all); if a list, plot exactly those keys
    fig (Figure): if provided, plot results into an existing figure
    style (str): the plotting style to use (default "fancy"; other options are "simple", None, or any Matplotlib style)
    show_data (bool): plot the data, if available
    show_skipped (bool): show even results that are skipped by default
    show_module (bool): whether to show the module as well as the result name; if an int, show if the label is less than that length; if -1, use a newline
    show_label (str): if 'fig', reset the fignum; if 'title', set the figure suptitle
    fig_kw (dict): passed to ``plt.subplots()``
    plot_kw (dict): passed to ``plt.plot()``
    scatter_kw (dict): passed to ``plt.scatter()``, for plotting the data

##### reset_time_pars { #starsim.sim.Sim.reset_time_pars }

```python
sim.Sim.reset_time_pars(force=True)
```

Reset the time parameters in the modules; used for imposing the sim's timestep on the modules

##### run { #starsim.sim.Sim.run }

```python
sim.Sim.run(until=None, verbose=None)
```

Run the model once

##### run_one_step { #starsim.sim.Sim.run_one_step }

```python
sim.Sim.run_one_step(verbose=None)
```

Run a single sim step; only used for debugging purposes.

Note: sim.run_one_step() runs a single simulation timestep, which involves
multiple function calls. In contrast, loop.run_one_step() runs a single
function call.

Note: the verbose here is only for the Loop object, not the sim.

##### save { #starsim.sim.Sim.save }

```python
sim.Sim.save(filename=None, shrink=None, **kwargs)
```

Save to disk as a gzipped pickle.

Args:
    filename (str or None): the name or path of the file to save to; if None, uses stored
    shrink (bool or None): whether to shrink the sim prior to saving (reduces size by ~99%)
    kwargs: passed to sc.makefilepath()

Returns:
    filename (str): the validated absolute path to the saved file

**Example**::

    sim.save() # Saves to a .sim file

##### shrink { #starsim.sim.Sim.shrink }

```python
sim.Sim.shrink(inplace=True, size_limit=1.0)
```

"Shrinks" the simulation by removing the people and other memory-intensive
attributes (e.g., some interventions and analyzers), and returns a copy of
the "shrunken" simulation. Used to reduce the memory required for RAM or
for saved files.

Args:
    inplace (bool): whether to perform the shrinking in place (default), or return a shrunken copy instead
    size_limit (float): print a warning if any module is larger than this size limit, in units of KB per timestep (set to None to disable)

Returns:
    shrunken (Sim): a Sim object with the listed attributes removed

##### start_step { #starsim.sim.Sim.start_step }

```python
sim.Sim.start_step()
```

Start the step -- only print progress; all actual changes happen in the modules

##### summarize { #starsim.sim.Sim.summarize }

```python
sim.Sim.summarize(how='default')
```

Provide a quick summary of the sim; returns the last entry for count and
cumulative results, and the mean otherwise.

Args:
    how (str): how to summarize: can be 'mean', 'median', 'last', or a mapping of result keys to those

##### to_df { #starsim.sim.Sim.to_df }

```python
sim.Sim.to_df(sep='_', **kwargs)
```

Export results as a Pandas dataframe
Args:
    sep (str): separator for the keys
    kwargs: passed to results.to_df()

##### to_json { #starsim.sim.Sim.to_json }

```python
sim.Sim.to_json(
    filename=None,
    keys=None,
    tostring=False,
    indent=2,
    verbose=False,
    **kwargs,
)
```

Export results and parameters as JSON.

Args:
    filename (str): if None, return string; else, write to file
    keys (str/list): attributes to write to json (choices: 'pars' and/or 'summary')
    verbose (bool): detail to print
    kwargs (dict): passed to sc.jsonify()

Returns:
    A dictionary representation of the parameters and/or summary results
    (or write that dictionary to a file)

**Examples**::

    json = sim.to_json()
    sim.to_json('results.json')
    sim.to_json('summary.json', keys='summary')

## Functions

| Name | Description |
| --- | --- |
| [check_sims_match](#starsim.sim.check_sims_match) | Shortcut to using ss.diff_sims() to check if multiple sims match |
| [demo](#starsim.sim.demo) | Create a simple demo simulation for Starsim |
| [diff_sims](#starsim.sim.diff_sims) | Compute the difference of the summaries of two simulations, and print any |

### check_sims_match { #starsim.sim.check_sims_match }

```python
sim.check_sims_match(*args, full=False)
```

Shortcut to using ss.diff_sims() to check if multiple sims match

Args:
    args (list): a list of 2 or more sims to compare
    full (bool): if True, return whether each sim matches the first

**Example**::

    s1 = ss.Sim(diseases='sir', networks='random')
    s2 = ss.Sim(pars=dict(diseases='sir', networks='random'))
    s3 = ss.Sim(diseases=ss.SIR(), networks=ss.RandomNet())
    assert ss.check_sims_match(s1, s2, s3)

### demo { #starsim.sim.demo }

```python
sim.demo(run=True, plot=True, summary=True, show=True, **kwargs)
```

Create a simple demo simulation for Starsim

Defaults to using the SIR model with a random network, but these can be configured.

Args:
    run (bool): whether to run the sim
    plot (bool): whether to plot the results
    summary (bool): whether to print a summary of the results
    kwargs (dict): passed to ``ss.Sim()``

**Examples**::

    ss.demo() # Run, plot, and show results
    ss.demo(diseases='hiv', networks='mf') # Run with different defaults

### diff_sims { #starsim.sim.diff_sims }

```python
sim.diff_sims(
    sim1,
    sim2,
    skip_key_diffs=False,
    skip=None,
    full=False,
    output=False,
    die=False,
)
```

Compute the difference of the summaries of two simulations, and print any
values which differ.

Args:
    sim1 (Sim/MultiSim/dict): either a simulation/MultiSim object or the sim.summary dictionary
    sim2 (im/dict): ditto
    skip_key_diffs (bool): whether to skip keys that don't match between sims
    skip (list): a list of values to skip
    full (bool): whether to print out all values (not just those that differ)
    output (bool): whether to return the output as a string (otherwise print)
    die (bool): whether to raise an exception if the sims don't match
    require_run (bool): require that the simulations have been run

**Example**::

    s1 = ss.Sim(rand_seed=1).run()
    s2 = ss.Sim(rand_seed=2).run()
    ss.diff_sims(s1, s2)