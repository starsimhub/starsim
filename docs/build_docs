#!/usr/bin/env python
"""
Build documentation with Quarto; usage is simply:
./build_docs

Notebook execution options are:
  ./build_docs jupyter # Execute with jcache in parallel (default)
  ./build_docs jupyter # Execute with jcache in parallel (default)

Additional arguments are passed to quarto render, e.g.:
    ./build_docs quarto --cache-refresh
"""

import os
import sys
import sciris as sc

def run(cmd):
    sc.printgreen(f'\n> {cmd}\n')
    if not debug:
        return sc.runcommand(cmd, wait=False)

debug = False
execute = None
valid = ['jupyter', 'quarto', 'none']
if len(sys.argv)>1:
    execute = sys.argv[1]
    if execute == '--execute': execute = 'quarto' # Replace as an alias
    if execute not in valid:
        errormsg = f'{execute} not a valid choice; choices are {sc.strjoin(valid)}'
        raise ValueError(errormsg)
    argstr = sc.strjoin(sys.argv[2:], sep=' ')
else:
    execute = 'jupyter'
    argstr = ''

if execute == 'jupyter' and not os.path.exists('./tutorials/.jupyter_cache'):
    print('Falling back to quarto docs build since Jupyter cache not yet initialized')
    execute = 'quarto'

T = sc.timer()

sc.heading(f'Building docs with Quarto and execute="{execute}"', divider='â˜…')

# Generate API documentation using quartodoc
sc.heading('Building API documentation...')
run('python -m quartodoc build')

sc.heading('Building docs links...')
run('python -m quartodoc interlinks')

if execute == 'jupyter':
    sc.heading('Executing Jupyter notebooks via jcache')
    run('./execute_notebooks')

# Build the Quarto documentation
if execute == 'quarto':
    sc.heading('Rendering docs with notebook execution...')
    run(f'quarto render --execute{argstr}')
else:
    sc.heading('Rendering docs...')
    run(f'quarto render{argstr}')

# Tidy up
sc.heading("Tidying outputs...")
run('./clean_outputs')

sc.heading("Normalizing notebooks...")
run('./normalize_notebooks')

T.toc('Docs built')
print(f"\nIndex:\n{os.getcwd()}/_build/index.html")
